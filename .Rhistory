edge.weight = E(my.graph)$weight/max(E(my.graph)$weight)
edge.weight = (edge.weight/max(edge.weight))*5
# rescale to between 0.5 and 5
edge.weight[edge.weight<0.5]=0.5
edge.weight[edge.weight>10]=10
L= layout_with_fr(my.graph)
L[,1]=coordinates(core.centroids)[,1]
L[,2]=coordinates(core.centroids)[,2]
linear.dimension = linear.dimensions[i]
pdf(paste0(maps.folder,"network_map",linear.dimension,".pdf"), width = 5, height = 5)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(my.graph, layout=L, vertex.label=NA, edge.label=NA, vertex.frame.color = NA, vertex.size=vertex.weight, edge.color="black",edge.width=edge.weight,
add = TRUE, rescale = FALSE, edge.curved=TRUE, edge.arrow.mode=0 )
for(component in unique(components(my.graph)$membership)){
component_shapes = cores.poly[cores.poly$DN %in% which(components(my.graph)$membership == component),]
c_e = extent(component_shapes)
rect(c_e[1], c_e[3], c_e[2], c_e[4])
}
dev.off()
png(paste0(maps.folder,"network_map",linear.dimension,".png"), width = 5, height = 5, units="in", res=300)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(my.graph, layout=L, vertex.label=NA, edge.label=NA, vertex.frame.color = NA, vertex.size=vertex.weight, edge.color="black",edge.width=edge.weight,
add = TRUE, rescale = FALSE, edge.curved=TRUE, edge.arrow.mode=0 )
for(component in unique(components(my.graph)$membership)){
component_shapes = cores.poly[cores.poly$DN %in% which(components(my.graph)$membership == component),]
c_e = extent(component_shapes)
rect(c_e[1], c_e[3], c_e[2], c_e[4])
}
dev.off()
i = i + 1
}
# ok, but I would need to add all of the other stuff to the map?
# show all three or just one?
# maybe change the color scheme, diverging scheme does not make sense
DN1=13
DN2=19
core.select1 = cores.poly[cores.poly$DN==DN1,]
core.select2 = cores.poly[cores.poly$DN==DN2,]
DN1.label.loc = coordinates(gCentroid(crop(core.select1,e)))
DN2.label.loc = coordinates(gCentroid(crop(core.select2,e)))
#summary(cores.poly$comb4000)
mycolours <- brewer.pal(9, "Reds")
mybreaks = classIntervals(cores.poly$comb4000, n = 7, style = "jenks", intervalClosure = "left")
mybreaks = mybreaks$brks
mybreaks
#cut(cores.poly$comb4000, mybreaks)
mycolourscheme <- mycolours[findInterval(cores.poly$comb4000, vec = mybreaks)]
#plot(cores.poly, col = mycolourscheme)
#legend(e[1] + ((e[2]-e[1])*0.75), e[3] + ((e[4]-e[3])*0.75), legend = levels(cut(cores.poly$comb4000, mybreaks)), fill = mycolours, cex = 0.8)
png(paste0(maps.folder,"importance_map.png"), width=5, height=5, units="in", res=300)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(cores.poly, col = mycolourscheme, lwd = 0.25, add = TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
shadowtext(DN1.label.loc, labels=DN1, cex=1, r=0.1)
shadowtext(DN2.label.loc, labels=DN2, cex=1, r=0.1)
addnortharrow(pos="bottomleft", padin = c(0.35, 0.75), scale = 0.5)
addscalebar(pos="bottomleft", padin = c(0.85, 0.75), plotunit ="m", widthhint=0.5)
#legend("right", legend = levels(cut(cores.poly$comb4000, mybreaks)), fill = mycolours, cex = 0.8)
legend(e[1] + ((e[2]-e[1])*0.72), e[3] + ((e[4]-e[3])*0.97), legend = levels(cut(cores.poly$comb4000, mybreaks)), fill = mycolours, cex = 0.8)
dev.off()
##############################
### Make latex figure file ###
##############################
figurefile = file(paste0(plots.folder,"figures.tex"), open = "wt")
write("\\documentclass{article}",figurefile)
write("\\usepackage{graphicx}",figurefile)
write("\\usepackage{subcaption}",figurefile)
write("\\usepackage{nopageno}",figurefile)
write("\\usepackage[font=small,labelfont=bf]{caption}",figurefile)
write("\\usepackage[letterpaper, total={8in, 8in}]{geometry}",figurefile)
write("\\begin{document}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"map_zoom_lcps","}"),figurefile)
caption = paste0("Example of flow calculation for one source pixel going from patch 23 to patch 28. Black dots are additional pixels that fall within range of the destination patch, and will subsequently have least cost paths (LCPs) and flow calculated. Blue lines are LCPs, purple line is the Panama Canal, estimated tapir density (individuals/km2) shown in shades of brown. See Figure 2 for locational context within region.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"cores_map","}"),figurefile)
caption = "Map of tapir habitat patches, across their geographic range, with an estimated population more than 10 individuals, identified using an Integrated Species Distribution Model (ISDM). Habitat patches are numbered 1-28 and shown in green, protected areas shown in brown (dark green areas are the intersection between habitat patches and protected areas), purple lines represent the Panama Canal and planned path of the Nicaragua Canal. Specific locations mentioned in the Discussion: (a) - Santa Rosa, (b) - La Muralla. Black box delineates area mapped in Figure 1."
#caption = "Map of habitat patches (black box delineates area mapped in Figure 1). Green areas are habitat patches. Brown areas are protected areas. Dark green areas represent the intersection between habitat patches and protected areas. Purple lines represent the Panama Canal and the planned path of the Nicaragua Canal. (a) - Santa Rosa, (b) - La Sepultura, (c) - El Triunfo, (d) - La Muralla."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map1000","}"),figurefile)
write("\\caption{Max dispersal = 40 km, components = 11}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map2000","}"),figurefile)
write("\\caption{Max dispersal = 80 km, components = 8}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map4000","}"),figurefile)
write("\\caption{Max dispersal = 160 km, components = 3}",figurefile)
write("\\end{subfigure}",figurefile)
caption = paste0("Maps of network connectivity. Thickness of edges indicates strength of flow between vertices, size of nodes indicates estimated population size. ",
"Boxes delineate separated graph components.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"importance_map","}"),figurefile)
caption = "Choropleth map of combined indices (max dispersal = 160 km)."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\end{document}",figurefile)
closeAllConnections()
cores.poly@data
summary(cores.poly@data)
predictors.folder
libs = c('ggplot2','reshape2','rgdal','xtable','rgeos','igraph','gdistance',"classInt","RColorBrewer","dplyr",'raster','prettymapr')
lapply(libs, require, character.only = TRUE)
shadowtext <- function(x, y=NULL, labels, bg="white", col="black", theta= seq(0, 2*pi, length.out=50), r=0.1, ... ) {
xy <- xy.coords(x,y)
xo <- r*strwidth('A')
yo <- r*strheight('A')
# draw background text with small shift in x and y in background colour
for (i in theta) {
text( xy$x + cos(i)*xo, xy$y + sin(i)*yo, labels, col=bg, ... )
}
# draw actual text in exact xy position in foreground colour
text(xy$x, xy$y, labels, col=col, ... )
}
sr_cea = "+proj=cea +lon_0=0 +lat_ts=0 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs +ellps=WGS84 +towgs84=0,0,0"
sr_geo = " +init=epsg:4326 +proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0"
#################
### data prep ###
#################
output.folder = "/Users/codyschank/Dropbox/Research/Dissertation/outputs_chp4_4km_final2/"
foldernames = list.dirs(path = output.folder,full.names = TRUE)
predictors.folder = "/Users/codyschank/Dropbox/Research/Dissertation/DataPrep_output/4km_chp4/"
plots.folder = paste0(output.folder,"plots/")
dir.create(file.path(plots.folder), showWarnings = FALSE)
csvs = list.files(foldernames,full.names=TRUE,pattern="outputs_df")
merged = do.call("rbind", lapply(csvs, read.csv, header=TRUE,stringsAsFactors=FALSE))
merged$candidate_model = paste("model",merged$candidate_model,sep="")
allData.df = data.frame(merged)
resolution = unique(allData.df$resolution)
sampling.radius = round(unique(allData.df$r.po),0)
n.sample = unique(allData.df$n.samples)
model = unique(allData.df$model)
xCovs = paste0("x.",na.omit(unique(unlist(strsplit(allData.df$x.po.covs,",")))))
beta0.xCovs = c("beta0",xCovs)
wCovs.po = paste0("w.po.",na.omit(unique(unlist(strsplit(allData.df$w.po.covs,",")))))
wCovs.pa = paste0("w.pa.",na.omit(unique(unlist(strsplit(allData.df$w.pa.covs,",")))))
wCovs.pa.sampling = paste0("w.pa.sampling.",na.omit(unique(unlist(strsplit(allData.df$w.pa.sampling.covs,",")))))
alpha0.wCovs = c("alpha0.po","alpha0.pa",wCovs.po,wCovs.pa,wCovs.pa.sampling)
allCovs = c(beta0.xCovs,alpha0.wCovs)
allCovs.se = paste0(allCovs,".se")
model.averaging.final = unique(allData.df[1,c("model","resolution","n.samples","r.po")]) # hard coded this in for now
model.averaging.final[,allCovs] = NA
model.averaging.final[,allCovs.se] = NA
# check recip and total population to see if I need to fine tune recip
minrecipCondNum = 1e-6
View(allData.df[,c("total_population","recip")])
sum(allData.df$recip>1e-6,na.rm=T)
sum(allData.df$recip>1e-5,na.rm=T)
sum(allData.df$recip>1e-4,na.rm=T)
new_minrecipCondNum = 1e-4 # as opposed to 1e-6
allData.df$estimated.se = allData.df$recip > new_minrecipCondNum
# remove outlier models for total population, changing recipCondNum doesn't get all of them
#allData.df$estimated.se = (allData.df$recip > minrecipCondNum) & (allData.df$total_population < 100000)
model.averaging.final[, allCovs] = colMeans(allData.df[allData.df$estimated.se, allCovs], na.rm=TRUE)
model.averaging.final[, allCovs.se] = colMeans(allData.df[allData.df$estimated.se, allCovs.se], na.rm=TRUE)
all.covs = na.omit(unique(unlist(strsplit(allData.df$x.po.covs,","))))
sgrid = raster::stack(paste0(predictors.folder,all.covs,".tif"))
xycov = na.omit(raster::rasterToPoints(sgrid))
xy = xycov[,1:2]
des = as.data.frame(xycov[,3:ncol(xycov)])
X.back = as.matrix(cbind(rep(1, dim(des)[1]), des))
input.folder = "/Users/codyschank/Dropbox/Research/Dissertation/dataPrep_input/"
forestloss = raster(paste0(input.folder,"forestloss1km.tif"))
datamask = raster(paste0(input.folder,"datamask1km.tif"))
pa_raster = raster("/Users/codyschank/Dropbox/Research/Dissertation/dataPrep_output/1km/protected.tif") # need to fix this to match 4km
pa_raster_4km = raster("/Users/codyschank/Dropbox/Research/Dissertation/dataPrep_output/4km_chp4/protected.tif")
studyArea = readOGR(paste0(input.folder,"tapir_studyArea_new.shp"),"tapir_studyArea_new")
studyArea_proj = spTransform(studyArea,sr_cea)
presenceData = read.csv("/Users/codyschank/Dropbox/Research/Dissertation/Presence_Data/presence_only_proj.csv")
paData = read.csv(paste0("/Users/codyschank/Dropbox/Research/Dissertation/Presence_Data/detection_histories_proj_10samples.csv"))
paData = paData[paData$Y > extent(studyArea_proj)[3],]
coordinates(presenceData) = c("X","Y")
proj4string(presenceData) = sr_cea
coordinates(paData) = c("X","Y")
proj4string(paData) = sr_cea
protected_areas = readOGR(paste0(input.folder,"WDPA_selection.shp"),"WDPA_selection", stringsAsFactors = F, use_iconv = TRUE, encoding = "UTF-8")
protected_areas_proj = spTransform(protected_areas,sr_cea)
lake = readOGR(paste0(input.folder,"Lake_proj.shp"),"Lake_proj")
countries = readOGR(paste0(input.folder,"country1m_vmap.shp"),"country1m_vmap")
e.buffer = extent(extent(studyArea)[1]-1,extent(studyArea)[2]+1,
extent(studyArea)[3]-1,extent(studyArea)[4]+1)
countries.crop.geo = crop(countries,e.buffer)
countries.crop = spTransform(countries.crop.geo,sr_cea)
canals = readOGR(paste0(input.folder,"canal_paths.shp"), layer = "canal_paths")
# testing some additional layers
mx_community_areas = readOGR(paste0(input.folder,"COMMUNITY_PA.shp"), layer = "COMMUNITY_PA")
mx_community_areas_proj = spTransform(mx_community_areas,sr_cea)
indigenous_presence = readOGR(paste0(input.folder,"presindigw.shp"), layer = "presindigw")
indigenous_presence$prcnt_indigenous = indigenous_presence$pobindi / indigenous_presence$pobtot
iucn_indigenous_areas = readOGR(paste0(input.folder,"PI_UICN_ORMACC_2016.shp"), layer = "PI_UICN_ORMACC_2016")
iucn_indigenous_areas_proj = spTransform(iucn_indigenous_areas,sr_cea)
core.centroids = gCentroid(cores.poly, byid=TRUE, id=cores.poly$DN)
# where are the points of highest intensity in Integrated Model
intensity.matrix = values(intensity)
max.index = which.max(intensity.matrix)
max.location = xyFromCell(intensity, max.index)
linearPredictor.sdm = X.back %*% as.numeric(model.averaging.final[,beta0.xCovs])
response.sdm.lambda = exp(linearPredictor.sdm)
raster.sdm.lambda = raster(sgrid)
cells = cellFromXY(raster.sdm.lambda, xy)
raster.sdm.lambda[cells] = response.sdm.lambda
raster.sdm.psi = 1-exp(-1*(raster.sdm.lambda)*resolution^2)
file_name_base = paste0(resolution,"km_",sampling.radius,"m_",n.sample,"samples_",model)[1] # hard coded for now
maps.folder = paste0(plots.folder,"maps/")
dir.create(file.path(maps.folder), showWarnings = FALSE)
tifs.folder = paste0(maps.folder,"tifs/")
dir.create(file.path(tifs.folder), showWarnings = FALSE)
writeRaster(raster.sdm.lambda, paste0(tifs.folder,file_name_base,"_lambda.tif"), "GTiff", overwrite=TRUE)
writeRaster(raster.sdm.psi, paste0(tifs.folder,file_name_base,"_psi.tif"), "GTiff", overwrite=TRUE)
intensity = raster.sdm.lambda
ones = raster(intensity)
ones = setValues(ones, 1)
ones = mask(ones,intensity)
global.mean = cellStats(intensity, "mean")
global.sd = cellStats(intensity, "sd")
cell.nums = Which(!is.na(intensity), cells = TRUE)
all.n = length(intensity)
fw = focalWeight(intensity, 10000, type='circle')
fw[fw>0] = 1
sum.weights = focal(ones, w=fw, fun=sum, na.rm=TRUE)
sum.values = focal(intensity, w=fw, fun=sum, na.rm=TRUE)
localG.numerator = sum.values - (sum.weights*global.mean)
localG.denominator = global.sd*(((all.n*sum.weights)-sum.weights^2)/(all.n-1))^0.5
localG = localG.numerator/localG.denominator
localG = mask(localG,intensity)
writeRaster(localG, paste0(maps.folder,"localG.tif"), overwrite = TRUE)
cores = localG > 1.96
cores[cores == 0] = NA
cores.clump = clump(cores, directions = 4)
source("/Users/codyschank/Dropbox/Research/Dissertation/scripts/gdal_polygonizeR.R")
# requires python, and gdal to be correctly installed
cores.poly = gdal_polygonizeR(cores.clump)
cores.poly = gBuffer(cores.poly, byid=TRUE, width = 0) # repairs geometry for later
writeOGR(cores.poly, dsn=paste0(maps.folder,"cores.poly.shp"), layer="cores.poly", driver="ESRI Shapefile", overwrite_layer = TRUE)
#cores.poly = readOGR(dsn=paste0(maps.folder,"cores.poly.shp"), layer="cores.poly")
###############
# get population in each core
cores.raster = raster(intensity)
cores.raster = rasterize(cores.poly,cores.raster,field="DN")
cores.zonal = data.frame(zonal(intensity*resolution^2, cores.raster, fun = 'sum', na.rm = TRUE)) # multiply intensity by area of site
names(cores.zonal)[2] = "sum"
cores.poly = merge(cores.poly,cores.zonal,by.x="DN",by.y="zone")
cores.poly$area_sqkm = area(cores.poly) / 1000^2
cores.poly = cores.poly[cores.poly$sum>10,] # remove any cores with less than 10 individuals predicted
# redo indexes and DN after removing cores with less than 10 individuals
cores.poly$DN = seq(1,length(cores.poly))
for(i in seq(1,length(cores.poly))){cores.poly@polygons[[i]]@ID = as.character(cores.poly@data$DN[i])} # set ID to DN for each polygon
cores.poly@data
# calculate confirmed presence in cores
paData.presence = paData[paData$Presence == 1,]
cores.poly[cores.poly$DN %in% raster::intersect(cores.poly,presenceData)$DN,"PO"] = 1
cores.poly[is.na(cores.poly$PO), "PO"] = 0
cores.poly[cores.poly$DN %in% raster::intersect(cores.poly,paData.presence)$DN,"PA"] = 1
cores.poly[is.na(cores.poly$PA), "PA"] = 0
cores.poly[(cores.poly$PO == 1) | (cores.poly$PA == 1),"Presence"] = 1
cores.poly[is.na(cores.poly$Presence), "Presence"] = 0
# calculate forest loss
forestloss_pts = rasterToPoints(forestloss,spatial=TRUE)
forestloss_proj = spTransform(forestloss_pts,sr_cea)
forestloss_intersect = raster::intersect(forestloss_proj,cores.poly)
forestloss_summary = aggregate(forestloss_intersect$forestloss1km,by=list(DN=forestloss_intersect$DN), FUN=sum)
datamask_pts = rasterToPoints(datamask,spatial=TRUE)
datamask_proj = spTransform(datamask_pts,sr_cea)
datamask_intersect = raster::intersect(datamask_proj,cores.poly)
datamask_summary = aggregate(datamask_intersect$datamask1km,by=list(DN=datamask_intersect$DN), FUN=sum)
pa_pts = rasterToPoints(pa_raster,spatial=TRUE)
pa_intersect = raster::intersect(pa_pts,cores.poly)
pa_summary = aggregate(pa_intersect$protected,by=list(DN=pa_intersect$DN), FUN=sum)
cores.poly$prcnt_FL = forestloss_summary$x / datamask_summary$x
cores.poly$FL_index = cores.poly$prcnt_FL/max(cores.poly$prcnt_FL)
cores.poly$pa_sqkm = pa_summary$x
cores.poly$prcnt_prot = cores.poly$pa_sqkm/ cores.poly$area_sqkm
cores.poly$prcnt_unprot = 1 - cores.poly$prcnt_prot
cores.poly$popindex = cores.poly$sum/max(cores.poly$sum)
cores.poly$inv_popindex = 1-cores.poly$popindex
core.centroids = gCentroid(cores.poly, byid=TRUE, id=cores.poly$DN)
# where are the points of highest intensity in Integrated Model
intensity.matrix = values(intensity)
max.index = which.max(intensity.matrix)
max.location = xyFromCell(intensity, max.index)
guanacaste = coordinates(gCentroid(protected_areas_proj[protected_areas_proj$NAME=="Guanacaste",]))
la_muralla = coordinates(gCentroid(protected_areas_proj[protected_areas_proj$NAME=="La Muralla",]))
volcan_barva = coordinates(gCentroid(protected_areas_proj[protected_areas_proj$NAME=="Braulio Carrillo",]))
la_sepultura = coordinates(gCentroid(protected_areas_proj[protected_areas_proj$NAME=="La Sepultura",]))
el_triunfo = coordinates(gCentroid(protected_areas_proj[protected_areas_proj$NAME=="El Triunfo",]))
# convert pa raster layer to polygons so I can use instead of protect_areas_proj
pa_raster_copy = pa_raster
pa_raster_copy[pa_raster_copy==0] = NA
pa_raster_polygonize = gdal_polygonizeR(pa_raster_copy)
e_zoom = as(extent(-9250064,-8780445,789027.4,1099974), 'SpatialPolygons')
proj4string(e_zoom) = proj4string(cores.poly.select)
pdf(paste0(maps.folder,"cores_map.pdf"), width = 5, height = 5)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(pa_raster_polygonize,col=alpha("brown", 0.6),border=FALSE, add=TRUE) # could use pas_cores_select instead
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(e_zoom, add = TRUE)
shadowtext(core.centroids@coords[,1], core.centroids@coords[,2], labels=cores.poly$DN, cex=0.5, r=0.05)
shadowtext(guanacaste, labels="(a)", cex=0.75, r=0.05)
#shadowtext(la_sepultura, labels="(b)", cex=0.75, r=0.05)
#shadowtext(el_triunfo, labels="(c)", cex=0.75, r=0.05)
shadowtext(la_muralla, labels="(b)", cex=0.75, r=0.05)
addnortharrow(pos="bottomleft", padin = c(0.35, 0.75), scale = 0.5)
addscalebar(pos="bottomleft", padin = c(0.85, 0.75), plotunit ="m", widthhint=0.5)
#shadowtext(volcan_barva, labels="(d)", cex=0.75, r=0.05)
dev.off()
e_zoom = as(extent(-9250064,-8780445,789027.4,1099974), 'SpatialPolygons')
proj4string(e_zoom) = proj4string(cores.poly)
pdf(paste0(maps.folder,"cores_map.pdf"), width = 5, height = 5)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(pa_raster_polygonize,col=alpha("brown", 0.6),border=FALSE, add=TRUE) # could use pas_cores_select instead
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(e_zoom, add = TRUE)
shadowtext(core.centroids@coords[,1], core.centroids@coords[,2], labels=cores.poly$DN, cex=0.5, r=0.05)
shadowtext(guanacaste, labels="(a)", cex=0.75, r=0.05)
#shadowtext(la_sepultura, labels="(b)", cex=0.75, r=0.05)
#shadowtext(el_triunfo, labels="(c)", cex=0.75, r=0.05)
shadowtext(la_muralla, labels="(b)", cex=0.75, r=0.05)
addnortharrow(pos="bottomleft", padin = c(0.35, 0.75), scale = 0.5)
addscalebar(pos="bottomleft", padin = c(0.85, 0.75), plotunit ="m", widthhint=0.5)
#shadowtext(volcan_barva, labels="(d)", cex=0.75, r=0.05)
dev.off()
pdf(paste0(maps.folder,"cores_map.pdf"), width = 5, height = 5)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(pa_raster_polygonize,col=alpha("black", 0.6),border=FALSE, add=TRUE) # could use pas_cores_select instead
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(e_zoom, add = TRUE)
shadowtext(core.centroids@coords[,1], core.centroids@coords[,2], labels=cores.poly$DN, cex=0.5, r=0.05)
shadowtext(guanacaste, labels="(a)", cex=0.75, r=0.05)
#shadowtext(la_sepultura, labels="(b)", cex=0.75, r=0.05)
#shadowtext(el_triunfo, labels="(c)", cex=0.75, r=0.05)
shadowtext(la_muralla, labels="(b)", cex=0.75, r=0.05)
addnortharrow(pos="bottomleft", padin = c(0.35, 0.75), scale = 0.5)
addscalebar(pos="bottomleft", padin = c(0.85, 0.75), plotunit ="m", widthhint=0.5)
#shadowtext(volcan_barva, labels="(d)", cex=0.75, r=0.05)
dev.off()
figurefile = file(paste0(plots.folder,"figures.tex"), open = "wt")
write("\\documentclass{article}",figurefile)
write("\\usepackage{graphicx}",figurefile)
write("\\usepackage{subcaption}",figurefile)
write("\\usepackage{nopageno}",figurefile)
write("\\usepackage[font=small,labelfont=bf]{caption}",figurefile)
write("\\usepackage[letterpaper, total={8in, 8in}]{geometry}",figurefile)
write("\\begin{document}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"map_zoom_lcps","}"),figurefile)
caption = paste0("Example of flow calculation for one source pixel going from patch 23 to patch 28. Black dots are additional pixels that fall within range of the destination patch, and will subsequently have least cost paths (LCPs) and flow calculated. Blue lines are LCPs, purple line is the Panama Canal, estimated tapir density (individuals/km2) shown in shades of brown. See Figure 2 for locational context within region.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"cores_map","}"),figurefile)
caption = "Map of tapir habitat patches, across their geographic range, with an estimated population more than 10 individuals, identified using an Integrated Species Distribution Model (ISDM). Habitat patches are numbered 1-28 and shown in green, protected areas shown in brown (dark green areas are the intersection between habitat patches and protected areas), purple lines represent the Panama Canal and planned path of the Nicaragua Canal. Specific locations mentioned in the Discussion: (a) - Santa Rosa, (b) - La Muralla. Black box delineates area mapped in Figure 1."
#caption = "Map of habitat patches (black box delineates area mapped in Figure 1). Green areas are habitat patches. Black areas are protected areas. Dark green areas represent the intersection between habitat patches and protected areas. Purple lines represent the Panama Canal and the planned path of the Nicaragua Canal. (a) - Santa Rosa, (b) - La Sepultura, (c) - El Triunfo, (d) - La Muralla."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map1000","}"),figurefile)
write("\\caption{Max dispersal = 40 km, components = 11}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map2000","}"),figurefile)
write("\\caption{Max dispersal = 80 km, components = 8}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map4000","}"),figurefile)
write("\\caption{Max dispersal = 160 km, components = 3}",figurefile)
write("\\end{subfigure}",figurefile)
caption = paste0("Maps of network connectivity. Thickness of edges indicates strength of flow between vertices, size of nodes indicates estimated population size. ",
"Boxes delineate separated graph components.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"importance_map","}"),figurefile)
caption = "Choropleth map of combined indices (max dispersal = 160 km)."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\end{document}",figurefile)
closeAllConnections()
png(paste0(maps.folder,"cores_map.png"), width=5, height=5, units="in", res=300)
par(mai=c(0.0,0.0,0.0,0.0))
plot(countries.crop, border = FALSE)
e = extent(countries.crop)
rect(e[1], e[3], e[2], e[4], col = alpha("light blue", 0.3), border = FALSE)
plot(countries.crop, col = alpha("tan", 0.3), border = FALSE, add = TRUE)
plot(studyArea_proj,col = alpha("tan", 0.6), border = "black", lwd = 0.25, add = TRUE)
plot(pa_raster_polygonize,col=alpha("black", 0.6),border=FALSE, add=TRUE) # could use pas_cores_select instead
plot(cores.poly, col=alpha("dark green", 0.6), border = FALSE, add=TRUE)
plot(lake, col=alpha("light blue", 0.6), border = FALSE, add = TRUE)
plot(countries.crop, border = "black", lwd = 0.25,  add = TRUE)
plot(canals, col= "purple", lwd = 2, add = TRUE)
plot(e_zoom, add = TRUE)
shadowtext(core.centroids@coords[,1], core.centroids@coords[,2], labels=cores.poly$DN, cex=0.5, r=0.05)
shadowtext(guanacaste, labels="(a)", cex=0.75, r=0.05)
#shadowtext(la_sepultura, labels="(b)", cex=0.75, r=0.05)
#shadowtext(el_triunfo, labels="(c)", cex=0.75, r=0.05)
shadowtext(la_muralla, labels="(b)", cex=0.75, r=0.05)
addnortharrow(pos="bottomleft", padin = c(0.35, 0.75), scale = 0.5)
addscalebar(pos="bottomleft", padin = c(0.85, 0.75), plotunit ="m", widthhint=0.5)
#shadowtext(volcan_barva, labels="(d)", cex=0.75, r=0.05)
dev.off()
figurefile = file(paste0(plots.folder,"figures.tex"), open = "wt")
write("\\documentclass{article}",figurefile)
write("\\usepackage{graphicx}",figurefile)
write("\\usepackage{subcaption}",figurefile)
write("\\usepackage{nopageno}",figurefile)
write("\\usepackage[font=small,labelfont=bf]{caption}",figurefile)
write("\\usepackage[letterpaper, total={8in, 8in}]{geometry}",figurefile)
write("\\begin{document}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"map_zoom_lcps","}"),figurefile)
caption = paste0("Example of flow calculation for one source pixel going from patch 23 to patch 28. Black dots are additional pixels that fall within range of the destination patch, and will subsequently have least cost paths (LCPs) and flow calculated. Blue lines are LCPs, purple line is the Panama Canal, estimated tapir density (individuals/km2) shown in shades of brown. See Figure 2 for locational context within region.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"cores_map","}"),figurefile)
caption = "Map of tapir habitat patches, across their geographic range, with an estimated population more than 10 individuals, identified using an Integrated Species Distribution Model (ISDM). Habitat patches are numbered 1-28 and shown in green, protected areas shown in black (dark green areas are the intersection between habitat patches and protected areas), purple lines represent the Panama Canal and planned path of the Nicaragua Canal. Specific locations mentioned in the Discussion: (a) - Santa Rosa, (b) - La Muralla. Black box delineates area mapped in Figure 1."
#caption = "Map of habitat patches (black box delineates area mapped in Figure 1). Green areas are habitat patches. Black areas are protected areas. Dark green areas represent the intersection between habitat patches and protected areas. Purple lines represent the Panama Canal and the planned path of the Nicaragua Canal. (a) - Santa Rosa, (b) - La Sepultura, (c) - El Triunfo, (d) - La Muralla."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map1000","}"),figurefile)
write("\\caption{Max dispersal = 40 km, components = 11}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map2000","}"),figurefile)
write("\\caption{Max dispersal = 80 km, components = 8}",figurefile)
write("\\end{subfigure}",figurefile)
write("\\begin{subfigure}{.33\\textwidth}",figurefile)
write(paste0("\\includegraphics[width=7cm,keepaspectratio]{",maps.folder,"network_map4000","}"),figurefile)
write("\\caption{Max dispersal = 160 km, components = 3}",figurefile)
write("\\end{subfigure}",figurefile)
caption = paste0("Maps of network connectivity. Thickness of edges indicates strength of flow between vertices, size of nodes indicates estimated population size. ",
"Boxes delineate separated graph components.")
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\begin{figure}",figurefile)
write(paste0("\\includegraphics[width=\\textwidth,height=\\textheight,keepaspectratio]{",maps.folder,"importance_map","}"),figurefile)
caption = "Choropleth map of combined indices (max dispersal = 160 km)."
write(paste0("\\caption{",caption,"}"),figurefile)
write("\\end{figure}",figurefile)
write("\\end{document}",figurefile)
closeAllConnections()
library(raster)
TCC_2017 = raster('/imagery/TCC_2017.tif')
TCC_2017 = raster('./imagery/TCC_2017.tif')
TCC_2017 = raster('../imagery/TCC_2017.tif')
TCC_2017 = raster('imagery/TCC_2017.tif')
TCC_2017 = raster('~/imagery/TCC_2017.tif')
setwd("~/kouprey")
TCC_2017 = raster('/imagery/TCC_2017.tif')
TCC_2017 = raster('imagery/TCC_2017.tif')
plot(TCC_2017)
proj4string(TCC_2017)
e = as(extent(-9250064,-8780445,789027.4,1099974), 'SpatialPolygons')
TCC_2017
